//@version=5
//------------------------------------------------------- CONFIGURACION GESTION CAPITAL--------------------------------------------------
strategy("Solo_Stochastic_v1",
         overlay=true,
         initial_capital=10000, // Establece el capital inicial X unidades de la divisa de tu cuenta
         commission_type="percent", // Tipo de comisión como porcentaje
         pyramiding=10, // Esto permite hacer entradas adicionales en la misma dirección mientras una posición está abierta. 
         commission_value=0.01) // Comisión del 0.01% por orden


// Configuracion del size de compra
currentPrice = close // El precio actual del activo
amount_to_invest = 500 
qty_to_buy = amount_to_invest / currentPrice // Calcula la cantidad a comprar con 'amount_to_invest'


//------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------- EMAS ---------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------
longEmaPeriod_B = 200

longEmaPeriod = 55
shortEmaPeriod = 10


// Cálculo de las EMAs
longEma = ta.ema(close, longEmaPeriod)
shortEma = ta.ema(close, shortEmaPeriod)

longEma_B = ta.ema(close, longEmaPeriod_B)


// Dibujar las EMAs en el gráfico
plot(longEma_B, color=color.rgb(255, 0, 0), title="EMA 200", linewidth=2)
plot(longEma, color=color.rgb(255, 174, 0), title="EMA 55", linewidth=2)
plot(shortEma, color=color.rgb(0, 119, 255), title="EMA 10", linewidth=3)



// -----------------------------------------------------------------------------------------------------------
// -----------------------------------Configuracion ----------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

// Entradas para habilitar o deshabilitar operaciones largas y cortas
allowLongs = true
allowShorts = false


// Periodo de tiempo activo para la estrategia
start_date = timestamp("2024-05-14 18:00 +0000")
end_date = timestamp("2024-12-01 12:00 +0000")

//---------------------------------------------------------------------------------------------------------
//----------------------------------------------- Script --------------------------------------------------
//---------------------------------------------------------------------------------------------------------


// Inicializa variables para niveles de sobrecompra y sobrevendido
float overbought_level = 90
float oversold_level = 30


// Define el periodo del estocástico
k_period = input(14, title="K Period")
d_period = input(3, title="D Period")
smooth = input(3, title="Smoothing")


// Verifica si el tiempo actual está dentro del rango especificado
time_filter = (time >= start_date) and (time <= end_date)


// Calcula el estocástico
sto_k = ta.sma(ta.stoch(close, high, low, k_period), smooth)
sto_d = ta.sma(sto_k, d_period)


// Condiciones para entrar y salir de una operación, incluyendo el filtro de tiempo
enterLong = ta.crossover(sto_k, sto_d) and (sto_k < oversold_level) and time_filter

exitLong = ta.crossunder(sto_k, sto_d) and (sto_k > overbought_level) and time_filter

enterShort = ta.crossunder(sto_k, sto_d) and sto_k > overbought_level and time_filter

exitShort = ta.crossover(sto_k, sto_d) and (sto_k < oversold_level) and time_filter

// Visualización mejorada
bgcolor(sto_k < oversold_level ? color.new(color.green, 90) : na)
bgcolor(sto_k > overbought_level ? color.new(color.red, 90) : na)
plotshape(series=enterLong, location=location.belowbar, color=color.green, style=shape.labelup, text="Buy")
plotshape(series=enterShort, location=location.abovebar, color=color.red, style=shape.labeldown, text="Sell")


// Define una variable que será true solo en 'start_date'
start_date_highlight = (time == start_date)

// Usa esa variable como condición para 'bgcolor()'
bgcolor(start_date_highlight ? color.new(#ffffff, 20) : na, title="Start Date Highlight")

// Función para formatear la fecha y hora
getTimeString() =>
    yearStr = str.tostring(year(time))
    monthStr = str.tostring(month(time))
    dayStr = str.tostring(dayofmonth(time))
    hourStr = str.tostring(hour(time))
    minuteStr = str.tostring(minute(time))
    secondStr = str.tostring(second(time))
    hourStr + ":" + minuteStr + ":" + secondStr + "_" + dayStr + "/" + monthStr + "/" + yearStr 

// Ejecutar las órdenes de la estrategia y generar alertas
if allowLongs and enterLong
    strategy.entry("Long", strategy.long, qty=qty_to_buy)
    alert('{"Ticker": "' + syminfo.ticker + '", "Temporalidad": "' + timeframe.period + '", "Quantity": "' + str.tostring(qty_to_buy) + '", "Entry Price Alert": "' + str.tostring(close) + '", "Time Alert": "' + getTimeString() + '", "Order": "Open Long", "Strategy": "Stochastic_v1"}', alert.freq_once_per_bar)
if allowLongs and exitLong
    strategy.close("Long")
    alert('{"Ticker": "' + syminfo.ticker + '", "Temporalidad": "' + timeframe.period + '", "Exit Price Alert": "' + str.tostring(close) + '", "Time Alert": "' + getTimeString() + '", "Order": "Close Long", "Strategy": "Stochastic_v1"}', alert.freq_once_per_bar)
if allowShorts and enterShort
    strategy.entry("Short", strategy.short, qty=qty_to_buy)
    alert('{"Ticker": "' + syminfo.ticker + '", "Temporalidad": "' + timeframe.period + '", "Quantity": "' + str.tostring(qty_to_buy) + '", "Entry Price Alert": "' + str.tostring(close) + '", "Time Alert": "' + getTimeString() + '", "Order": "OpenShort", "Strategy": "Stochastic_v1"}', alert.freq_once_per_bar)
if allowShorts and exitShort
    strategy.close("Short")
    alert('{"Ticker": "' + syminfo.ticker + '", "Temporalidad": "' + timeframe.period + '", "Exit Price Alert": "' + str.tostring(close) + '", "Time Alert": "' + getTimeString() + '", "Order": "Close Short", "Strategy": "Stochastic_v1"}', alert.freq_once_per_bar)
